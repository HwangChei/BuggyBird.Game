import pygame as pg
import sys,time
from buggyvai import Buggy
from pipe import Pipe
pg.init()


class Game:
    #FrontDisplay/Window Configuration
    
    def __init__(self):
        self.width=600
        self.height=700
        self.scale_factor=1.5
        self.win=pg.display.set_mode((self.width,self.height))
        self.clock=pg.time.Clock()
        self.move_speed=200
        self.start_monitoring=False
        self.buggy=Buggy(self.scale_factor)
        self.is_enter_pressed=False
        self.score=0
        self.font=pg.font.Font("assets/font.ttf",24)
        self.score_text=self.font.render("Score: 0 ",True,(225,0,0))
        self.score_text_rect=self.score_text.get_rect(center=(100,30))
        
        self.restart_text=self.font.render("GANDU RESTART",True,(0,0,0))
        self.restart_text_rect=self.score_text.get_rect(center=(250,600))
        
        self.is_game_started=True
        self.pipes=[]
        self.pipe_generate_counter=71
        self.ground()
            
        self.gameLoop()
        
    #Event Chalauna(Event Controlling)   
    def gameLoop(self):
        last_time=time.time()
        while True:
            #time ko lagi(for time)
            new_time=time.time()
            dt=new_time-last_time
            last_time=new_time
            
            for event in pg.event.get():
                if event.type == pg.QUIT:
                    pg.quit()
                    sys.exit()
                if event.type==pg.KEYDOWN and self.is_game_started: 
                    if event.key==pg.K_RETURN:
                        self.is_enter_pressed=True
                        self.buggy.update_on=True
                    if event.key==pg.K_SPACE and self.is_enter_pressed:
                        self.buggy.flap(dt)  
                if event.type==pg.MOUSEBUTTONDOWN:
                    if self.restart_text_rect.collidepoint(pg.mouse.get_pos()):
                        self.restartGame()          
                                               
            self.updateEverything(dt) 
            self.checkCollisions()
            self.checkScore()       
            self.draw()
            pg.display.update()   
            self.clock.tick(60)
            
    def restartGame(self):
        self.score=0
        self.score_text=self.font.render("Score: 0 ",True,(225,0,0))
        self.is_enter_pressed=False
        self.is_game_started=True 
        self.buggy.resetposition()
        self.pipes.clear()
        self.pipe_generate_counter=71
        self.buggy.update_on=False
               
    def checkScore(self):
        if len(self.pipes)>0:
            if (self.buggy.rect.left>self.pipes[0].rect_down.left and 
            self.buggy.rect.right<self.pipes[0].rect_down.right and not self.start_monitoring):
                self.start_monitoring=True  
            if self.buggy.rect.left>self.pipes[0].rect_down.right and self.start_monitoring:
                self.start_monitoring=False
                self.score+=1
                self.score_text=self.font.render(f"Score: {self.score} ",True,(225,0,0))
            
    def checkCollisions(self):
        if len(self.pipes):
            if self.buggy.rect.bottom>500:
                self.buggy.update_on=False
                self.is_enter_pressed=False
                self.is_game_started=False
            if (self.buggy.rect.colliderect(self.pipes[0].rect_down) or
            self.buggy.rect.colliderect(self.pipes[0].rect_up)):
                self.is_enter_pressed=False
                self.is_game_started=False
            
    def updateEverything(self,dt):
        #initailization process                                        
        if self.is_enter_pressed:
            self.ground1_rect.x-=int(self.move_speed*dt)
            self.ground2_rect.x-=int(self.move_speed*dt)
            if self.ground1_rect.right<0:
                self.ground1_rect.x=self.ground2_rect.right
            if self.ground2_rect.right<0:
                self.ground2_rect.x=self.ground1_rect.right   
            #generating Pipe
            if self.pipe_generate_counter>=70:
                self.pipes.append(Pipe(self.scale_factor,self.move_speed))   
                self.pipe_generate_counter=0
            self.pipe_generate_counter+=1
            
            for pipe in self.pipes:
                pipe.update(dt)
            
            if len(self.pipes)!=0:
                if self.pipes[0].rect_up.right<0:
                    self.pipes.pop(0) 
                
            #buggy move                    
        self.buggy.update(dt)
        
                    
    def draw(self):
        #coordinates        
            self.win.blit(self.bg_img,(-150,0))
            for pipe in self.pipes:
                pipe.drawPipe(self.win)
            self.win.blit(self.ground1_img,self.ground1_rect)
            self.win.blit(self.ground2_img,self.ground2_rect) 
            self.win.blit(self.buggy.image,self.buggy.rect)
            self.win.blit(self.score_text,self.score_text_rect)
            if not self.is_game_started:  
                self.win.blit(self.restart_text,self.restart_text_rect)
                     
    def ground(self):
        #Image and ground
        self.bg_img=pg.transform.scale_by(pg.image.load("assets/bg.png").convert(),self.scale_factor)
        self.ground1_img=pg.transform.scale_by(pg.image.load("assets/ground.png").convert(),self.scale_factor)
        self.ground2_img=pg.transform.scale_by(pg.image.load("assets/ground.png").convert(),self.scale_factor)
        
        self.ground1_rect=self.ground1_img.get_rect()
        self.ground2_rect=self.ground2_img.get_rect()
        self.ground1_rect.x=0
        self.ground2_rect.x=self.ground1_rect.right
        self.ground1_rect.y=500
        self.ground2_rect.y=500                     
game=Game()                    
